#ifndef __SIMD_VECTOR_HEADER__
#error We need #include <simd/simd.h>
#endif

#if defined(__i386__) || defined(__x86_64__)
typedef __m128i simd_type;
#else
typedef simd_uint4 simd_type;
#endif

- (void)execute
{
	PluginData *pluginData = [self.seaPlugins data];
	
	if ([pluginData spp] == 2) {
		[self executeGrey:pluginData];
	} else {
		[self executeColor:pluginData];
	}
}

- (void)executeGrey:(PluginData *)pluginData
{
	IntRect selection;
	int spp, width, height;
	unsigned char *data, *resdata, *overlay, *replace;
	size_t vec_len, max;
	
	// Set-up plug-in
	[pluginData setOverlayOpacity:255];
	[pluginData setOverlayBehaviour:SeaOverlayBehaviourReplacing];
	selection = [pluginData selection];
	
	// Get plug-in data
	width = [pluginData width];
	height = [pluginData height];
	spp = [pluginData spp];
	vec_len = width * height * spp;
	if (vec_len % 16 == 0) {
		vec_len /= 16;
	} else {
		vec_len /= 16;
		vec_len++;
	}
	data = [pluginData data];
	overlay = [pluginData overlay];
	replace = [pluginData replace];
	
	// Convert from GA to ARGB
	for (int i = 0; i < width * height; i++) {
		newdata[i * 4] = data[i * 2 + 1];
		newdata[i * 4 + 1] = data[i * 2];
		newdata[i * 4 + 2] = data[i * 2];
		newdata[i * 4 + 3] = data[i * 2];
	}
	
	// Run CoreImage effect
	resdata = [self executeChannel:pluginData withBitmap:newdata];
	
	// Convert from output to GA
	if ((selection.size.width > 0 && selection.size.width < width) || (selection.size.height > 0 && selection.size.height < height))
		max = selection.size.width * selection.size.height;
	else
		max = width * height;
	for (size_t i = 0; i < max; i++) {
		newdata[i * 2] = resdata[i * 4];
		newdata[i * 2 + 1] = resdata[i * 4 + 3];
	}
	
	// Copy to destination
	if ((selection.size.width > 0 && selection.size.width < width) || (selection.size.height > 0 && selection.size.height < height)) {
		for (int i = 0; i < selection.size.height; i++) {
			memset(&(replace[width * (selection.origin.y + i) + selection.origin.x]), 0xFF, selection.size.width);
			memcpy(&(overlay[(width * (selection.origin.y + i) + selection.origin.x) * 2]), &(newdata[selection.size.width * 2 * i]), selection.size.width * 2);
		}
	} else {
		memset(replace, 0xFF, width * height);
		memcpy(overlay, newdata, width * height * 2);
	}
}

- (void)executeColor:(PluginData *)pluginData
{
	simd_type *vdata;
	IntRect selection;
	int width, height;
	unsigned char *data, *resdata, *overlay, *replace;
	size_t vec_len;
	
	// Set-up plug-in
	[pluginData setOverlayOpacity:255];
	[pluginData setOverlayBehaviour:SeaOverlayBehaviourReplacing];
	selection = [pluginData selection];
	
	// Get plug-in data
	width = [pluginData width];
	height = [pluginData height];
	vec_len = width * height * 4;
	if (vec_len % 16 == 0) {
		vec_len /= 16;
	} else {
		vec_len /= 16;
		vec_len++;
	}
	data = [pluginData data];
	overlay = [pluginData overlay];
	replace = [pluginData replace];
#ifndef NO_PREMULTIPLY
	SeaPremultiplyBitmap(4, newdata, data, width * height);
	// Convert from RGBA to ARGB
	vdata = (simd_type *)newdata;
#else
	vdata = (simd_type *)data;
#endif
	for (size_t i = 0; i < vec_len; i++) {
#if defined(__i386__) || defined(__x86_64__)
		__m128i vstore = _mm_srli_epi32(vdata[i], 24);
		vdata[i] = _mm_slli_epi32(vdata[i], 8);
		vdata[i] = _mm_add_epi32(vdata[i], vstore);
#else
		simd_uint4 vstore = (vdata[i] >> 24) & 0xFF;
		vdata[i] = (vdata[i] << 8) & 0xFFFFFF00;
		vdata[i] = vdata[i] | vstore;
#endif
	}
	
	// Run CoreImage effect (exception handling is essential because we've altered the image data)
	@try {
#ifndef NO_PREMULTIPLY
		resdata = [self executeChannel:pluginData withBitmap:newdata];
#else
		resdata = [self executeChannel:pluginData withBitmap:data];
#endif
	}
	@catch (NSException *exception) {
		for (size_t i = 0; i < vec_len; i++) {
#if defined(__i386__) || defined(__x86_64__)
			__m128i vstore = _mm_slli_epi32(vdata[i], 24);
			vdata[i] = _mm_srli_epi32(vdata[i], 8);
			vdata[i] = _mm_add_epi32(vdata[i], vstore);
#else
			simd_uint4 vstore = (vdata[i] << 24) & 0xFF000000;
			vdata[i] = (vdata[i] >> 8) & 0x00FFFFFF;
			vdata[i] = vdata[i] | vstore;
#endif
		}
		NSLog(@"%@", [exception reason]);
		return;
	}
#ifndef NO_PREMULTIPLY
	if ((selection.size.width > 0 && selection.size.width < width) || (selection.size.height > 0 && selection.size.height < height)) {
		SeaUnpremultiplyBitmap(4, resdata, resdata, selection.size.width * selection.size.height);
	} else {
		SeaUnpremultiplyBitmap(4, resdata, resdata, width * height);
	}
#endif
	// Convert from ARGB to RGBA
	for (size_t i = 0; i < vec_len; i++) {
#if defined(__i386__) || defined(__x86_64__)
		__m128i vstore = _mm_slli_epi32(vdata[i], 24);
		vdata[i] = _mm_srli_epi32(vdata[i], 8);
		vdata[i] = _mm_add_epi32(vdata[i], vstore);
#else
		simd_uint4 vstore = (vdata[i] << 24) & 0xFF000000;
		vdata[i] = (vdata[i] >> 8) & 0x00FFFFFF;
		vdata[i] = vdata[i] | vstore;
#endif
	}
	
	// Copy to destination
	if ((selection.size.width > 0 && selection.size.width < width) || (selection.size.height > 0 && selection.size.height < height)) {
		for (int i = 0; i < selection.size.height; i++) {
			memset(&(replace[width * (selection.origin.y + i) + selection.origin.x]), 0xFF, selection.size.width);
			memcpy(&(overlay[(width * (selection.origin.y + i) + selection.origin.x) * 4]), &(resdata[selection.size.width * 4 * i]), selection.size.width * 4);
		}
	} else {
		memset(replace, 0xFF, width * height);
		memcpy(overlay, resdata, width * height * 4);
	}
}

- (unsigned char *)executeChannel:(PluginData *)pluginData withBitmap:(unsigned char *)data
{
	size_t vec_len;
	int width, height, channel;
	unsigned char *resdata, *datatouse;
	simd_type *vdata, *rvdata, orvmask;
#if defined(__i386__) || defined(__x86_64__)
	{
		unsigned char ormask[16];
		for (short i = 0; i < 16; i++) {
			ormask[i] = (i % 4 == 0) ? 0xFF : 0x00;
		}
		memcpy(&orvmask, ormask, 16);
	}
#else
	orvmask = simd_make_uint4(255, 255, 255, 255);
#endif
	
	// Make adjustments for the channel
	channel = [pluginData channel];
	datatouse = data;
	if (channel == SeaSelectedChannelPrimary || channel == SeaSelectedChannelAlpha) {
		width = [pluginData width];
		height = [pluginData height];
		vec_len = width * height * 4;
		if (vec_len % 16 == 0) {
			vec_len /= 16;
		} else {
			vec_len /= 16;
			vec_len++;
		}
		vdata = (simd_type *)data;
		rvdata = (simd_type *)newdata;
		datatouse = newdata;
		if (channel == SeaSelectedChannelPrimary) {
			for (int i = 0; i < vec_len; i++) {
#if defined(__i386__) || defined(__x86_64__)
				rvdata[i] = _mm_or_si128(vdata[i], orvmask);
#else
				rvdata[i] = (vdata[i] | orvmask);
#endif
			}
		} else if (channel == SeaSelectedChannelAlpha) {
			for (size_t i = 0; i < width * height; i++) {
				newdata[i * 4 + 1] = newdata[i * 4 + 2] = newdata[i * 4 + 3] = data[i * 4];
				newdata[i * 4] = 255;
			}
		}
	}
	
	// Run CoreImage effect
	resdata = [self CLASSMETHOD :pluginData withBitmap:datatouse];
	
	return resdata;
}
